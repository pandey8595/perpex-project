Restaurant Sales Report with Celery + Redis
# models.py
from django.db import models
from django.utils import timezone

class Menu(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return self.name


class Order(models.Model):
    item = models.ForeignKey(Menu, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.item} x {self.quantity}"


class Payment(models.Model):
    order = models.OneToOneField(Order, on_delete=models.CASCADE)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Payment: {self.amount}"


class SalesReport(models.Model):
    date = models.DateField(default=timezone.now)
    total_orders = models.PositiveIntegerField()
    total_sales = models.DecimalField(max_digits=12, decimal_places=2)
    top_item = models.CharField(max_length=100)

    def __str__(self):
        return f"Report {self.date} - {self.top_item}"

///////////////////////////////////////////////////////////////////////////////////////////

# celery.py (inside your Django project folder, e.g. myproject/celery.py)
import os
from celery import Celery
from celery.schedules import crontab

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")

app = Celery("myproject")
app.config_from_object("django.conf:settings", namespace="CELERY")
app.autodiscover_tasks()

# Schedule the report every night at 11:59 PM
app.conf.beat_schedule = {
    "generate-daily-sales-report": {
        "task": "myapp.tasks.generate_sales_report",
        "schedule": crontab(hour=23, minute=59),
    },
}

//////////////////////////////////////////////////////////////////////////////////////////

# tasks.py (inside your app e.g. myapp/tasks.py)
from celery import shared_task
from django.db.models import Sum
from django.utils import timezone
from .models import Order, Payment, SalesReport

@shared_task
def generate_sales_report():
    today = timezone.now().date()
    orders = Order.objects.filter(created_at__date=today)
    total_orders = orders.count()
    total_sales = Payment.objects.filter(order__in=orders).aggregate(Sum("amount"))["amount__sum"] or 0

    # Find top-selling item
    top_item_data = (
        orders.values("item__name")
        .annotate(total_qty=Sum("quantity"))
        .order_by("-total_qty")
        .first()
    )
    top_item = top_item_data["item__name"] if top_item_data else "None"

    # Save report
    report = SalesReport.objects.create(
        date=today,
        total_orders=total_orders,
        total_sales=total_sales,
        top_item=top_item,
    )
    return {
        "date": str(report.date),
        "total_orders": report.total_orders,
        "total_sales": float(report.total_sales),
        "top_item": report.top_item,
    }

///////////////////////////////////////////////////////////////////////////////

# serializers.py
from rest_framework import serializers
from .models import SalesReport

class SalesReportSerializer(serializers.ModelSerializer):
    class Meta:
        model = SalesReport
        fields = "__all__"

////////////////////////////////////
# views.py
from rest_framework import viewsets, permissions
from .models import SalesReport
from .serializers import SalesReportSerializer

class SalesReportViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = SalesReport.objects.all().order_by("-date")
    serializer_class = SalesReportSerializer
    permission_classes = [permissions.IsAdminUser]  # Only Manager/Admin can view


///////////////////////////////////////////////////////////////////////////////////////////////


# urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import SalesReportViewSet

router = DefaultRouter()
router.register("reports", SalesReportViewSet)

urlpatterns = [
    path("api/", include(router.urls)),
]

/////////////////////////////////////////////////////////////////////



{
  "date": "2025-08-20",
  "total_orders": 120,
  "total_sales": 45000.0,
  "top_item": "Burger"
}

//////////////////////////////////////////////////////////////////


Celery + Redis runs in the background.

At 11:59 PM, generate_sales_report() task runs.

It calculates total orders, total sales, and top-selling item.

Saves the report in SalesReport model.

Manager/Admin can fetch reports at /api/reports/.
