# models.py
from django.db import models

class Menu(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name


class Order(models.Model):
    STATUS_CHOICES = [
        ("Pending", "Pending"),
        ("Preparing", "Preparing"),
        ("Ready", "Ready"),
        ("Served", "Served"),
    ]

    customer_name = models.CharField(max_length=100)
    items = models.ManyToManyField(Menu, related_name="orders")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default="Pending")

    def __str__(self):
        return f"Order {self.id} - {self.customer_name} ({self.status})"

////////////////////////////////////////////////////////////////////////////////

# serializers.py
from rest_framework import serializers
from .models import Order, Menu

class MenuSerializer(serializers.ModelSerializer):
    class Meta:
        model = Menu
        fields = ["id", "name"]

class OrderSerializer(serializers.ModelSerializer):
    items = MenuSerializer(many=True, read_only=True)

    class Meta:
        model = Order
        fields = ["id", "customer_name", "items", "status"]

class OrderUpdateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Order
        fields = ["status"]

    def validate_status(self, value):
        order = self.instance
        valid_transitions = {
            "Pending": ["Preparing"],
            "Preparing": ["Ready"],
            "Ready": ["Served"],
            "Served": [],  # Final state
        }

        if value not in valid_transitions[order.status]:
            raise serializers.ValidationError(
                f"Invalid transition from {order.status} → {value}"
            )
        return value

//////////////////////////////////////////////////////////////

# views.py
from rest_framework import viewsets
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework import status
from .models import Order
from .serializers import OrderSerializer, OrderUpdateSerializer

class OrderViewSet(viewsets.ModelViewSet):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer

    @action(detail=True, methods=["patch"])
    def update_status(self, request, pk=None):
        order = self.get_object()
        serializer = OrderUpdateSerializer(order, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(OrderSerializer(order).data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

////////////////////////////////////////////////////////////////////////////
# urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import OrderViewSet

router = DefaultRouter()
router.register("orders", OrderViewSet)

urlpatterns = [
    path("api/", include(router.urls)),
]
//////////////////////////////////////////////////////////////////////////////
Example Usage
Create new order (default = Pending)

POST /api/orders/



{"customer_name": "John", "items": [1, 2]}

{"id": 5, "customer_name": "John", "items": [{"id":1,"name":"Pizza"}], "status": "Pending"}
{"status": "Preparing"}
{"status": "Served"}



Pending → Preparing → Ready → Served
